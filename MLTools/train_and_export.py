import os
import numpy as np
import tensorflow as tf
from tensorflow.keras import layers, models
import coremltools as ct
from coremltools.converters.mil import ClassifierConfig

# üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
X = np.load("dataset/X.npy")            # shape (N, 32, 2)
y = np.load("dataset/y.npy")            # shape (N,)
classes = np.load("dataset/classes.npy").tolist()  # ['fire', 'ice', 'lightning']

print(f"üìä X: {X.shape}, y: {y.shape}, classes: {classes}")

# üß† –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
model = models.Sequential([
    # üü¶ –í—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π: –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ 32 —Ç–æ—á–µ–∫ (x, y)
    layers.Input(shape=(32, 2)),

    # üß† –°–≤—ë—Ä—Ç–æ—á–Ω—ã–π —Å–ª–æ–π: 64 —Ñ–∏–ª—å—Ç—Ä–∞, —Ä–∞–∑–º–µ—Ä —è–¥—Ä–∞ 3, –∞–∫—Ç–∏–≤–∞—Ü–∏—è ReLU
    # –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –∏–∑ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Ä—É–Ω
    layers.Conv1D(64, 3, activation='relu'),

    # üßä MaxPooling: —É–º–µ–Ω—å—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å, –≤—ã–±–∏—Ä–∞—è –º–∞–∫—Å–∏–º—É–º –≤ –∫–∞–∂–¥–æ–º –æ–∫–Ω–µ
    # –î–µ–ª–∞–µ—Ç –º–æ–¥–µ–ª—å –º–µ–Ω–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π –∫ —Å–º–µ—â–µ–Ω–∏—è–º
    layers.MaxPooling1D(),

    # üß± "–†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç" 2D —Ñ–∏—á–∏ –≤ 1D –≤–µ–∫—Ç–æ—Ä (flatten)
    layers.Flatten(),

    # üîó –ü–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã–π —Å–ª–æ–π: 64 –Ω–µ–π—Ä–æ–Ω–∞, ReLU
    # –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –æ–±–æ–±—â—ë–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    layers.Dense(64, activation='relu'),

    # üéØ –í—ã—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π: –ø–æ –æ–¥–Ω–æ–º—É –Ω–µ–π—Ä–æ–Ω—É –Ω–∞ –∫–∞–∂–¥—ã–π –∫–ª–∞—Å—Å
    # –ü—Ä–∏–º–µ–Ω—è–µ—Ç softmax –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    layers.Dense(len(classes), activation='softmax')
])


model.compile(
    optimizer='adam',
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

# üöÇ –û–±—É—á–µ–Ω–∏–µ
model.fit(X, y, epochs=100, validation_split=0.2, verbose=1)

# üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ SavedModel
saved_model_path = "saved_model"
model.save(saved_model_path, save_format="tf")
print(f"‚úÖ SavedModel —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {saved_model_path}/")

# üß† –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
config = ClassifierConfig(class_labels=classes)

# üîÅ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ CoreML —Å –º–µ—Ç–∫–æ–π
mlmodel = ct.convert(
    saved_model_path,
    source="tensorflow",
    inputs=[ct.TensorType(name="input_1", shape=(1, 32, 2))],
    classifier_config=config,
    convert_to="mlprogram"
)

# üè∑ –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
output_name = mlmodel._spec.description.output[0].name
mlmodel.output_description[output_name] = "Predicted rune label"
mlmodel.user_defined_metadata["classes"] = ",".join(classes)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ ‚Äî –æ–±—â–∏–µ –ø–æ–ª—è
mlmodel.short_description = "Rune gesture recognizer for magic tower defense"
mlmodel.author = "Juri Breslauer"
mlmodel.license = "MIT"
mlmodel.version = "1.0"

# üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º .mlpackage
mlmodel.save("RuneModel.mlpackage")
print("‚úÖ CoreML –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: RuneModel.mlpackage")